{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _require = require(\"../utils/Api_urls\"),\n    urls = _require.urls;\n\nimport { doConsole } from \"./../utils/functions\";\n\nfunction doPost(body_data, url_plus) {\n  var isVendor,\n      url,\n      _await$fetch$then$the,\n      isError,\n      data,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function doPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          isVendor = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n          url = urls.API;\n          if (isVendor) url = urls.API_VENDOR;\n          doConsole(body_data);\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + url_plus, {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body_data)\n          }).then(function (response) {\n            return response.json();\n          }).then(function (responseJson) {\n            return {\n              isError: false,\n              data: responseJson\n            };\n          }).catch(function (error) {\n            return {\n              isError: true,\n              data: {}\n            };\n          }));\n\n        case 6:\n          _await$fetch$then$the = _context.sent;\n          isError = _await$fetch$then$the.isError;\n          data = _await$fetch$then$the.data;\n          console.log('1');\n          console.log(isError);\n          console.log(data);\n          return _context.abrupt(\"return\", {\n            isError: isError,\n            data: data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports.doPost = doPost;\nexport function apiRequest(body_data, url_plus) {\n  var isVendor,\n      url,\n      configs,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function apiRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          isVendor = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : false;\n          url = urls.API;\n          if (isVendor) url = urls.API_VENDOR;\n          configs = {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body_data)\n          };\n          console.log('configs');\n          console.log(configs);\n          console.log(url + url_plus);\n          return _context2.abrupt(\"return\", fetch(url + url_plus, configs).then(function (response) {\n            return response.json();\n          }).then(function (responseJson) {\n            return responseJson;\n          }).catch(function (error) {\n            console.log(error);\n            return \"No Internet\";\n          }));\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/Mughees/Projects/React.Pro/Game Rental/Code/src/utils/apiCalls.js"],"names":["require","urls","doConsole","doPost","body_data","url_plus","isVendor","url","API","API_VENDOR","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","responseJson","isError","data","catch","error","console","log","module","exports","apiRequest","configs"],"mappings":"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","sourcesContent":["const { urls } = require(\"../utils/Api_urls\");\nimport { doConsole } from \"./../utils/functions\"\n\nasync function doPost(body_data,url_plus,isVendor=false) {\n    var url = urls.API;\n    if(isVendor) url = urls.API_VENDOR;\n    // doConsole(\" I request @ \" + urls.API + url_plus);\n    doConsole(body_data);\n    var {isError, data} = await fetch(url + url_plus, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body_data),\n    }).then((response) => response.json())\n      .then((responseJson) => {\n        // console.log(responseJson)\n        return {isError:false,data:responseJson}\n      }).catch((error) => {\n        return {isError:true,data:{}}\n      });\n      console.log('1')\n      console.log(isError)\n      console.log(data)\n    return {isError,data};\n  }\n\n  module.exports.doPost = doPost;\n\n\n\nexport async function apiRequest(body_data, url_plus, isVendor = false) {\n  var url = urls.API;\n  if (isVendor) url = urls.API_VENDOR;\n  // doConsole(\" I request @ \" + urls.API + url_plus);\n  // doConsole(body_data);\n  const configs = {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(body_data),\n  }\n  console.log('configs')\n  console.log(configs)\n  console.log(url + url_plus)\n  return (\n    fetch(url + url_plus,configs).then((response) => response.json())\n      .then((responseJson) => {\n        return responseJson\n      }).catch((error) => {\n        console.log(error)\n        return \"No Internet\"\n      })\n  )\n\n\n  // return {isError,data};\n}"]},"metadata":{},"sourceType":"module"}